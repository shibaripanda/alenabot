import { UserConfig } from 'vite';
import { IdentifierOption } from '@vanilla-extract/integration';

interface Compiler {
    processVanillaFile(filePath: string, options?: {
        outputCss?: boolean;
    }): Promise<{
        source: string;
        watchFiles: Set<string>;
    }>;
    getCssForFile(virtualCssFilePath: string): {
        filePath: string;
        css: string;
    };
    close(): Promise<void>;
    getAllCss(): string;
}
interface CreateCompilerOptions {
    root: string;
    /**
     * By default, the compiler sets up its own file watcher. This option allows you to disable it if
     * necessary, such as during a production build.
     *
     * @default true
     */
    enableFileWatcher?: boolean;
    cssImportSpecifier?: (filePath: string) => string;
    identifiers?: IdentifierOption;
    viteConfig?: UserConfig;
    /** @deprecated */
    viteResolve?: UserConfig['resolve'];
    /** @deprecated */
    vitePlugins?: UserConfig['plugins'];
}
declare const createCompiler: ({ root, identifiers, cssImportSpecifier, viteConfig, enableFileWatcher, viteResolve, vitePlugins, }: CreateCompilerOptions) => Compiler;

export { type Compiler, type CreateCompilerOptions, createCompiler };
