import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectBot } from 'nestjs-telegraf';
import { UserDocument } from 'src/user/user.schema';
import { Telegraf } from 'telegraf';

@Injectable()
export class BotManagerNotificationService {
  constructor(
    @InjectBot() private bot: Telegraf,
    private readonly config: ConfigService,
  ) {
    console.log('BotManagerNotificationService initialized');
  }

  async sendNot(text: string) {
    const admin = this.config.get<number>('MANAGER_GROUP')!;
    await this.bot.telegram
      .sendMessage(admin, text, { parse_mode: 'HTML' })
      .catch((e) => {
        console.log(e);
      });
  }

  async newUserNotification(user: UserDocument) {
    const text = `‚ú¥Ô∏è <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–æ—Ç–µ</b>\n==================\n@${user.username}\n${user.firstName}\n${user.lastName}`;
    await this.sendNot(text);
  }

  async extraSimpleNotification(textStatus: string) {
    const text = `‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n==================\n${textStatus}`;
    await this.sendNot(text);
  }

  async simpleNotification(user: UserDocument, textStatus: string) {
    const text = `‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n==================\n@${user.username} | ${user.firstName} | ${user.lastName}\n${textStatus}`;
    await this.sendNot(text);
  }

  async newPaymentNotification(user: UserDocument) {
    const payment = user.payments[user.payments.length - 1];
    const sumUserPayments =
      user.payments.reduce((acc, p) => acc + p.total_amount, 0) / 100;
    const text = `üí∞ <b>–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ –∑–∞ –≤—Ö–æ–¥</b>\n==================\n@${user.username} | ${user.firstName} | ${user.lastName}\n${payment.service}\n<b>–û–ø–ª–∞—Ç–∞: ${payment.total_amount / 100}</b>\n–°—É–º–º–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É: ${sumUserPayments}\nü§ëü§ëü§ëü§ëü§ëü§ëü§ëü§ëü§ë`;
    await this.sendNot('üí∞');
    await this.sendNot(text);
  }

  async treeDaysNotification(user: UserDocument, textStatus: string) {
    const text = `3Ô∏è‚É£ ${textStatus}\n----\n${user.firstName} @${user.username}`;
    await this.sendNot(text);
  }

  async newLongPaymentNotification(user: UserDocument) {
    const payment = user.payments[user.payments.length - 1];
    const sumUserPayments =
      user.payments.reduce((acc, p) => acc + p.total_amount, 0) / 100;
    const text = `üí∞ <b>–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ</b>\n==================\n@${user.username} | ${user.firstName} | ${user.lastName}\n${payment.service}\n<b>–û–ø–ª–∞—Ç–∞: ${payment.total_amount / 100}</b>\n–°—É–º–º–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É: ${sumUserPayments}\nü§ëü§ëü§ëü§ëü§ëü§ëü§ëü§ëü§ë`;
    await this.sendNot('üí∞');
    await this.sendNot(text);
  }

  async lastNotification(user: UserDocument, textStatus: string) {
    const text = `1Ô∏è‚É£ ${textStatus}\n----\n${user.firstName} @${user.username}`;
    await this.sendNot(text);
  }

  async deleteUserNotification(user: UserDocument, textStatus: string) {
    const sumUserPayments =
      user.payments.reduce((acc, p) => acc + p.total_amount, 0) / 100;
    const text = `üö™ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —Å –∫–∞–Ω–∞–ª–∞</b>\n==================\n${textStatus}\n@${user.username}\n${user.firstName}\n${user.lastName}\n–°—É–º–º–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É: ${sumUserPayments}`;
    await this.sendNot(text);
  }
}
